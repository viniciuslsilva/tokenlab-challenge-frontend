# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

references:

  default_node_container_config: &default_node_container_config
    docker:
      - image: circleci/node:12.18.3
    working_directory: "~/project"

  default_python_container_config: &default_python_container_config
    docker:
      - image: "circleci/python:3.7"
    working_directory: "~/project"

  default_attach_workspace: &default_attach_workspace
    attach_workspace:
      at: .

  default_restore_cache: &default_restore_cache
    restore_cache:
      key: v1-node_modules-{{ checksum "package.json" }}

  default_save_cache: &default_save_cache
    save_cache:
      key: v1-node_modules-{{ checksum "package.json" }}
      paths:
        - ~/project/node_modules

  install_aws_cli: &install_aws_cli
    run:
      name: Install awscli
      command: sudo pip install awscli

  npm_install: &npm_install
    run:
      name: "Installing dependencies from NPM"
      command: "npm install"

jobs:
  lint:
    <<: *default_node_container_config
    steps:
      - checkout
      - *default_restore_cache
      - *npm_install
      - *default_save_cache
      - run:
          name: "Run lint"
          command: "npm run lint"

  build:
    <<: *default_node_container_config
    parameters:
      environment:
        description: "Build environment"
        type: string
    steps:
      - checkout
      - *default_restore_cache
      - *npm_install
      - *default_save_cache
      - run:
          name: "Building project"
          command: "npm run build -- --configuration=<< parameters.environment >>"
      - persist_to_workspace:
          root: .
          paths:
            - dist

  deploy:
    <<: *default_python_container_config
    parameters:
      access_key_env_var:
        description: "Environment variable that contains the value of AWS_ACCESS_KEY_ID"
        type: string
      secret_key_env_var:
        description: "Environment variable that contains the value of AWS_SECRET_ACCESS_KEY"
        type: string
      s3_bucket:
        description: "S3 bucket to upload artifacts"
        type: string
      cloudfront_distribution_id:
        description: "Distribution id to create invalidation"
        type: string
    steps:
      - *default_attach_workspace
      - *install_aws_cli
      - run:
          name: Configure credentials for environment
          command: |
            echo "export AWS_ACCESS_KEY_ID=$<< parameters.access_key_env_var >>" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$<< parameters.secret_key_env_var >>" >> $BASH_ENV
            echo "export S3_BUCKET_SITE=$<< parameters.s3_bucket >>" >> $BASH_ENV
            echo "export CLOUDFRONT_DISTRIBUTION_ID=$<< parameters.cloudfront_distribution_id >>" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Removing everything that is in the bucket
          command: aws s3 rm s3://$S3_BUCKET_SITE --recursive
      - run:
          name: Putting new deployment in bucket
          command: aws s3 cp dist/tokenlab-challenge s3://$S3_BUCKET_SITE --recursive
      - run:
          name: Invalidating Cloudfront distribution
          command: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

workflows:
  version: 2
  ci:
    jobs:
      - lint
      - build:
          environment: production
          requires:
            - lint
      - approve-deploy:
          type: approval
          requires:
            - build
      - deploy:
          name: deploy
          access_key_env_var: PROD_AWS_ACCESS_KEY_ID
          secret_key_env_var: PROD_AWS_SECRET_ACCESS_KEY
          s3_bucket: TOKENLAB_CHALLENGE_S3_BUCKET_SITE
          cloudfront_distribution_id: TOKENLAB_CHALLENGE_CLOUDFRONT_DISTRIBUTION_ID
          requires:
            - approve-deploy
